{"ast":null,"code":"var _jsxFileName = \"/home/abhishek-s-rathore/Desktop/project_mordor/src/components/BrowserFilter/BorwserFilter.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport CollapsibleFilter from \"../Common/CollapsibleFilter\";\nimport Select from \"../Common/Select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BrowserFilter(_ref) {\n  _s();\n\n  let {\n    filters,\n    setFilters,\n    handleChange,\n    breakdownOptions\n  } = _ref;\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n  const browsers = [\"Chrome\", \"Firefox\", \"Safari\", \"Edge\", \"Brave\"];\n  const {\n    browsers: checkedOption\n  } = filters;\n  console.log(isFilterOpen, \"isFilter\");\n\n  const handleOnChange = e => {\n    const {\n      id,\n      checked\n    } = e.target;\n    const obj = {\n      val: id,\n      checked,\n      key: \"browsers\"\n    };\n    handleChange(obj);\n  };\n\n  const handleToggleFilter = () => {\n    if (breakdownOptions.includes('Browser')) setIsFilterOpen(!isFilterOpen);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CollapsibleFilter, {\n      handleToggleFilter: handleToggleFilter,\n      title: \"Browser\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), isFilterOpen && /*#__PURE__*/_jsxDEV(Select, {\n      options: browsers,\n      checkedOption: checkedOption,\n      handleOnChange: handleOnChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BrowserFilter, \"Ck5YPSyGZjEl44uePWCVg1w6nLw=\");\n\n_c = BrowserFilter;\n\nvar _c;\n\n$RefreshReg$(_c, \"BrowserFilter\");","map":{"version":3,"sources":["/home/abhishek-s-rathore/Desktop/project_mordor/src/components/BrowserFilter/BorwserFilter.jsx"],"names":["React","useState","CollapsibleFilter","Select","BrowserFilter","filters","setFilters","handleChange","breakdownOptions","isFilterOpen","setIsFilterOpen","browsers","checkedOption","console","log","handleOnChange","e","id","checked","target","obj","val","key","handleToggleFilter","includes"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,iBAAP,MAA8B,6BAA9B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;;AAEA,eAAe,SAASC,aAAT,OAAgF;AAAA;;AAAA,MAAzD;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,UAAX;AAAuBC,IAAAA,YAAvB;AAAqCC,IAAAA;AAArC,GAAyD;AAC7F,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAMU,QAAQ,GAAG,CAAC,QAAD,EAAW,SAAX,EAAsB,QAAtB,EAAgC,MAAhC,EAAwC,OAAxC,CAAjB;AACA,QAAM;AAAEA,IAAAA,QAAQ,EAAEC;AAAZ,MAA8BP,OAApC;AAEAQ,EAAAA,OAAO,CAACC,GAAR,CAAYL,YAAZ,EAA0B,UAA1B;;AAEA,QAAMM,cAAc,GAAGC,CAAC,IAAI;AAC1B,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAkBF,CAAC,CAACG,MAA1B;AAEA,UAAMC,GAAG,GAAG;AACVC,MAAAA,GAAG,EAAEJ,EADK;AAEVC,MAAAA,OAFU;AAGVI,MAAAA,GAAG,EAAE;AAHK,KAAZ;AAMAf,IAAAA,YAAY,CAACa,GAAD,CAAZ;AACD,GAVD;;AAYA,QAAMG,kBAAkB,GAAG,MAAM;AAC/B,QAAGf,gBAAgB,CAACgB,QAAjB,CAA0B,SAA1B,CAAH,EACAd,eAAe,CAAC,CAACD,YAAF,CAAf;AACD,GAHD;;AAKA,sBACE;AAAA,4BACE,QAAC,iBAAD;AAAmB,MAAA,kBAAkB,EAAEc,kBAAvC;AAA2D,MAAA,KAAK,EAAC;AAAjE;AAAA;AAAA;AAAA;AAAA,YADF,EAGGd,YAAY,iBACX,QAAC,MAAD;AACE,MAAA,OAAO,EAAEE,QADX;AAEE,MAAA,aAAa,EAAEC,aAFjB;AAGE,MAAA,cAAc,EAAEG;AAHlB;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GArCuBX,a;;KAAAA,a","sourcesContent":["import React, { useState } from \"react\";\nimport CollapsibleFilter from \"../Common/CollapsibleFilter\";\nimport Select from \"../Common/Select\";\n\nexport default function BrowserFilter({ filters, setFilters, handleChange, breakdownOptions }) {\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n  const browsers = [\"Chrome\", \"Firefox\", \"Safari\", \"Edge\", \"Brave\"];\n  const { browsers: checkedOption } = filters;\n\n  console.log(isFilterOpen, \"isFilter\");\n\n  const handleOnChange = e => {\n    const { id, checked } = e.target;\n\n    const obj = {\n      val: id,\n      checked,\n      key: \"browsers\",\n    };\n\n    handleChange(obj);\n  };\n\n  const handleToggleFilter = () => {\n    if(breakdownOptions.includes('Browser'))\n    setIsFilterOpen(!isFilterOpen);\n  };\n\n  return (\n    <div>\n      <CollapsibleFilter handleToggleFilter={handleToggleFilter} title=\"Browser\" />\n\n      {isFilterOpen && (\n        <Select\n          options={browsers}\n          checkedOption={checkedOption}\n          handleOnChange={handleOnChange}\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}